#  dev
server.port=8080
# 会话超时（秒）1天
server.servlet.session.timeout=86400
#  params
wyait.picpath=D:/demo-images/

# redis之缓存及管理session前缀
shiro.redis.cache.prefix=hmtgrduate:shiro:cache:
shiro.redis.session.prefix=hmtgraduate:shiro:session:
# 3天（秒） 86400*3
remember.me.expire=259200

# springboot 之静态资源路径配置
#spring.mvc.static-path-pattern=/**
#spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/,file:${wyait.picpath}
# 热部署配置监听重启目录
#spring.devtools.restart.additional-paths=src/main/java,src/main/resources/templates
#spring.devtools.restart.additional-paths=src/main/java,src/main/resources
#排除那个目录的文件不需要restart
#spring.devtools.restart.exclude=config/**
# mysql
spring.datasource.druid.url=jdbc:mysql://192.168.0.8:3306/hmtgraduate?characterEncoding=UTF-8
spring.datasource.druid.username=root
spring.datasource.druid.password=admin1234
spring.datasource.druid.driver-class-name=com.mysql.cj.jdbc.Driver
# serverTimezone=UTC&useSSL=false&allowPublicKeyRetrieval=true
# com.mysql.cj.jdbc.Driver&amp;useSSL=false&serverTimezone=Asia/Shanghai&useUnicode=true&zeroDateTimeBehavior=CONVERT_TO_NULL&characterEncoding=utf8&autoReconnect=true&allowMultiQueries=true&useSSL=false
# 使用druid连接池  需要注意的是：spring.datasource.druid.type对应2.*版本的spring boot。
spring.datasource.druid.type=com.alibaba.druid.pool.DruidDataSource
# druid
#下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.druid.initial-size=5
spring.datasource.druid.min-idle=5
spring.datasource.druid.max-active=20
# 配置获取连接等待超时的时间
spring.datasource.druid.max-wait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.druid.time-between-eviction-runs-millis=120000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.druid.min-evictable-idle-time-millis=300000
# Oracle请使用select 1 from dual
spring.datasource.druid.validation-query=SELECT 'x'
spring.datasource.druid.test-while-idle=true
spring.datasource.druid.test-on-borrow=false
spring.datasource.druid.test-on-return=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.druid.pool-prepared-statements=true
spring.datasource.druid.max-pool-prepared-statement-per-connection-size=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙 ;日志是slf4j，log4j改为slf4j
#spring.datasource.druid.filters=stat,wall,log4j

#####druid监控配置
## WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
#是否启用StatFilter默认值true
# Druid WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
spring.datasource.druid.web-stat-filter.enabled=true
spring.datasource.druid.web-stat-filter.url-pattern=/*
spring.datasource.druid.web-stat-filter.exclusions=*.gif,*.png,*.jpg,*.html,*.js,*.css,*.ico,/druid/*
#session统计功能
spring.datasource.druid.web-stat-filter.session-stat-enable=true
#最大session数
spring.datasource.druid.web-stat-filter.session-stat-max-count=100000
#你可以配置principalSessionName，使得druid能够知道当前的session的用户是谁
spring.datasource.druid.web-stat-filter.principal-session-name=admin
#你可以配置principalSessionName，使得druid能够知道当前的cookie的用户是谁
spring.datasource.druid.web-stat-filter.principal-cookie-name=admin
#spring.datasource.druid.stat-view-servlet.allow= 127.0.0.1
#spring.datasource.druid.stat-view-servlet.deny= 192.168.32.139
#置profileEnable能够监控单个url调用的sql列表。
spring.datasource.druid.web-stat-filter.profile-enable=true


# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.druid.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true


# mybatis
mybatis.type-aliases-package=com.hmt.graduate.paper.pojo
mybatis.mapper-locations=classpath:mapper/*.xml

# 开启驼峰映射
mybatis.configuration.map-underscore-to-camel-case=true
# 通用mapper配置
#mapper.mappers=com.wyait.boot.dao
#mapper.not-empty=false
#mapper.identity=MYSQL
# pagehelper
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.returnPageInfo=check
pagehelper.params=count=countSql


# httpClient
# 代理的host  暂无
#httpclient.config.proxyhost=192.168.10.120
# 代理端口
#httpclient.config.proxyPort=8080
# 连接超时或异常重试次数
httpclient.config.retryTime=2
# 长连接保持时间，单位为s
httpclient.config.keepAliveTime=30
# 连接池最大连接数
httpclient.config.connMaxTotal=20
httpclient.config.maxPerRoute=20
# 连接超时时间，单位ms
httpclient.config.connectTimeout=30000
# 请求超时时间
httpclient.config.connectRequestTimeout=30000
# sock超时时间
httpclient.config.socketTimeout=60000
# 连接存活时间，单位s
httpclient.config.timeToLive=60


# redis
# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器IP
spring.redis.host=192.168.0.8
# Redis密码（默认为空）
spring.redis.password=admin1234
# Redis端口号
spring.redis.port=6379
# 连接超时时间 单位 ms（毫秒）
spring.redis.timeout=30000
###REDIS (RedisProperties) redis线程池设置
####################################################################
# springboot 2.x中的RedisProperties配置文件类，RedisProperties源码可知pool属性则被封装到了内部静态类Jedis和Lettuce中去了
# 要是配置连接池的最大连接数,前缀还是spring.redis，有两种途径：
# spring.redis.jedis.pool.max-active=8 或者 spring.redis.lettuce.pool.max-active=8
# 控制一个pool最多有多少个状态为idle(空闲的)的jedis实例，默认值也是8。
spring.redis.lettuce.pool.max-idle=8
# 控制一个pool最少有多少个状态为idle(空闲的)的jedis实例，默认值也是0。
spring.redis.lettuce.pool.min-idle=2
# 如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)。
spring.redis.lettuce.pool.max-active=20
# 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException
spring.redis.lettuce.pool.max-wait=30000
####################################################################
#默认生命周期1天（单位：s秒）86400,本项目设置1小时
spring.redis.defaultExpiration = 3600
#服务器上下文路径
spring.redis.contextPath = contextPath
# redis缓存前缀，会被redisCacheManager覆盖
#spring.cache.redis.key-prefix=admin:shiro:cache:


#######################################################################
# actuator
#actuator端口和后台保持一致。必须登录验证。
management.server.port=8078
# 修改访问路径  2.0之前默认是/  2.0默认是 /actuator  可以通过这个属性值修改
management.endpoints.web.base-path=/monitor
#开放所有页面节点  默认只开启了health、info两个节点
management.endpoints.web.exposure.include=*
#显示健康具体信息  默认不会显示详细信息
management.endpoint.health.show-details=always
# 禁用所有端点
management.endpoints.enabled-by-default = false
# 放开loggers端点
management.endpoint.loggers.enabled = true
#######################################################################
# security安全验证 springboot 2.*版本之后actuator结合security相关配置不支持
# 可以通过端口和后台保持一致，必须登录之后，才能进行操作来确保安全
# web项目，可通过内网访问进行日志切换
#management.security.enabled=true
#security.user.name=admin
#security.user.password=admin
